#lang racket
(#%require (only racket/base random))
(require "logica.rkt")


(define palos '("corazones"
                "diamantes"
                "plicas"
                "treboles"))

(define nombres '("As" "2" "3" "4"
                "5" "6" "7" "8"
                "9" "10" "J" "Q" "K"))

(define valores '((1 11) 2 3 4
                5 6 7 8
                9 10 10 10 10))



(define mazo (combinar palos nombres valores))


(define jugadores
  '(("crupier" #f (list))
    ("pancho" #f (list))
    ("lola" #f (list))
    ("manuela" #f (list))
  )
  )
(define conteo 52)

(define CantidadJugadores 4)


(define (pedir Njugador) (cond (#t
                                (let ([rnd (random conteo)])
                                  (set! jugadores (pedir-aux Njugador jugadores rnd mazo))
                                  (set! conteo (- conteo 1))
                                  (set! mazo (delete mazo rnd)))
                                )
                               ))


(define (iniciar Ncartas) (iniciar-aux (* Ncartas CantidadJugadores)))

(define (plantar-aux Njugador jugadores) (
                                cond ((zero? Njugador)
                                      (cons (list (caar jugadores)
                                                  #t
                                                  (caddar jugadores))
                                            (cdr jugadores)))
                               (else
                                (cons (car jugadores) (plantar-aux (- Njugador 1) (cdr jugadores))))
                               ))

(define (plantar Njugador) (
                            cond (#t
                                  (set! jugadores (plantar-aux Njugador jugadores)))
                                 ))

(define (plantado?-aux Njugador jugadores) (
                              cond ((zero? Njugador)
                                    (cadar jugadores))
                                   (else
                                    (plantado?-aux (- Njugador 1) (cdr jugadores)))
                               ))

(define (plantado? Njugador) (plantado?-aux Njugador jugadores))

(define (suma Njugador) 1)

(define (pedirCrupier) (
                        cond (< (suma 0) 17
                              (pedir 0)
                              (pedirCrupier))
                             (else
                              1)
                             ))


